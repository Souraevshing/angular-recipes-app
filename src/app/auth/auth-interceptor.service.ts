import {
  HttpEvent,
  HttpHandler,
  HttpInterceptor,
  HttpParams,
  HttpRequest,
} from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable, exhaustMap, map, take } from 'rxjs';
import { Store } from '@ngrx/store';

import * as fromRootReducer from '../store/app.root-reducer';

@Injectable({
  providedIn: 'root',
})
export class AuthInterceptor implements HttpInterceptor {
  constructor(private store: Store<fromRootReducer.AppState>) {}

  /**
   * @description interceptor for HttpRequests
   * intercept all the request and attach the token generated by subscribing the user,
   * so that we don't have to pass the auth param everywhere in the app,
   * this intercept method will handle the auth param to be passed in the req
   */

  intercept(
    req: HttpRequest<unknown>,
    next: HttpHandler
  ): Observable<HttpEvent<unknown>> {
    return this.store.select('auth').pipe(
      take(1),
      map((authState) => {
        return authState.user;
      }),
      exhaustMap((user) => {
        /**
         * @description fetch recipes
         * if user is null, then send the actual req to solve the err for fetching recipes
         * this error can occur since the token may be null and we try to access the token so the req fails with 400 error
         */
        if (!user) {
          return next.handle(req);
        }
        const modifiedRequest = req.clone({
          params: new HttpParams().set('auth', user.token!),
        });
        return next.handle(modifiedRequest);
      })
    );
  }
}
